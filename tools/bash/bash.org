#+title: Bash
#+startup: nofold

Este texto es una breve descripción de las características presentes en el shell
Bash (versión  5.1, 21  de diciembre de  2020). La página  principal de  Bash es
http://www.gnu.org/software/bash/.

Bash contiene características que aparecen  en otros shells populares, y algunas
características que sólo aparecen en Bash. Algunos de los shells de los que Bash
ha tomado prestados conceptos  son el Bourne Shell (sh), el  Korn Shell (ksh), y
el C-shell (csh y su sucesor, tcsh).

Este  manual  pretende   ser  una  breve  introducción   a  las  características
encontradas  en Bash.  La  página del  manual  de Bash  debería  usarse como  la
referencia definitiva sobre el comportamiento del shell.

** Tabla de contenido :TOC_4:
  - [[#qué-es-bash][¿Qué es Bash?]]
  - [[#qué-es-un-shell][¿Qué es un shell?]]
  - [[#definiciones][Definiciones]]
  - [[#características-básicas-de-la-shell][Características básicas de la Shell]]

** ¿Qué es Bash?
Bash  es el  shell,  o intérprete  del  lenguaje de  comandos,  para el  sistema
operativo GNU.  El nombre es  un acrónimo de  'Bourne-Again SHell', un  juego de
palabras con Stephen  Bourne, el autor del ancestro directo  del actual shell de
Unix sh, que apareció en la séptima  edición de la versión de Bell Labs Research
de Unix.

Bash es en gran medida compatible  con sh e incorpora características útiles del
shell  Korn ksh  y del  shell  C csh.  Se  pretende que  sea una  implementación
conforme a  la parte  de IEEE POSIX  Shell and Tools  de la  especificación IEEE
POSIX (IEEE Standard 1003.1). Ofrece mejoras funcionales con respecto a sh tanto
para el uso interactivo como para la programación.

Aunque el sistema operativo GNU proporciona otros shells, incluyendo una versión
de csh, Bash es el shell por defecto. Al igual que otro software de GNU, Bash es
bastante portable. Actualmente se ejecuta en  casi todas las versiones de Unix y
algunos    otros   sistemas    operativos   -    existen   puertos    soportados
independientemente para las plataformas MS-DOS, OS/2 y Windows.

** ¿Qué es un shell?
En  su  base, un  shell  es  simplemente un  procesador  de  macros que  ejecuta
comandos. El término  procesador de macros se refiere a  una funcionalidad en la
que el texto y los símbolos se expanden para crear expresiones más amplias.

Un  shell de  Unix  es tanto  un  intérprete  de comandos  como  un lenguaje  de
programación. Como intérprete  de comandos, el shell proporciona  la interfaz de
usuario al rico conjunto de utilidades  de GNU. Las características del lenguaje
de programación permiten combinar estas utilidades. Se pueden crear archivos que
contengan comandos, y  que se conviertan en comandos en  sí mismos. Estos nuevos
comandos tienen  el mismo estatus  que los  comandos del sistema  en directorios
como  /bin,  lo  que  permite  a  los  usuarios  o  grupos  establecer  entornos
personalizados para automatizar sus tareas comunes.

Los shells pueden  utilizarse de forma interactiva o no  interactiva. En el modo
interactivo, aceptan las entradas escritas  desde el teclado. Cuando se ejecutan
de forma no interactiva, los shells ejecutan comandos leídos desde un archivo.

Un shell  permite la ejecución de  comandos GNU, tanto de  forma sincrónica como
asincrónica. El shell  espera a que los comandos sincrónicos  se completen antes
de  aceptar más  entradas;  los comandos  asíncronos  continúan ejecutándose  en
paralelo con  el shell  mientras éste  lee y  ejecuta comandos  adicionales. Las
construcciones de redirección  permiten un control detallado de la  entrada y la
salida de esos comandos. Además, el  shell permite controlar el contenido de los
entornos de los comandos.

Los shells  también proporcionan  un pequeño  conjunto de  comandos incorporados
(builtins)  que  implementan  funcionalidades  imposibles  o  inconvenientes  de
obtener a  través de utilidades  separadas. Por  ejemplo, cd, break,  continue y
exec no  pueden implementarse fuera  del shell porque manipulan  directamente el
propio shell.  Los buildins history, getopts,  kill o pwd, entre  otros, podrían
implementarse en utilidades separadas, pero  es más conveniente utilizarlos como
comandos  incorporados.  Todos  los  buildins  del shell  se  describen  en  las
secciones siguientes.

Aunque la ejecución  de comandos es esencial,  la mayor parte de  la potencia (y
complejidad) de los  shells se debe a sus lenguajes  de programación integrados.
Como  cualquier  lenguaje  de  alto   nivel,  el  shell  proporciona  variables,
construcciones de control de flujo, citas y funciones.

Los shells ofrecen características orientadas específicamente al uso interactivo
más que a aumentar el lenguaje de programación. Estas características
interactivas incluyen el control de trabajos, la edición de la línea de
comandos, el historial de comandos y los alias.

** Definiciones
Estas definiciones se utilizan en el resto de este manual.

- ~POSIX~
  Una familia de estándares de sistemas  abiertos basados en Unix. Bash se ocupa
  principalmente de la parte de Shell y Utilidades del estándar POSIX 1003.1.

- ~blank~
  Un espacio o carácter de tabulación.

- ~builtin~
  Un comando que  es implementado internamente por el propio  shell, en lugar de
  por un programa ejecutable en algún lugar del sistema de archivos.

- ~control operator~
  Un token que realiza  una función de control. Es una nueva línea  o uno de los
  siguientes:  '=||=', '=&&=',  '=&=',  '=;=', '=;;=',  '=;&=', '=;;&=',  '=|=',
  '=|&=', '=(=', o '=)='.

- ~exit status~
  El valor devuelto  por un comando a  su llamador. El valor  está restringido a
  ocho bits, por lo que el valor máximo es 255.

- ~field~
  Una unidad de texto  que es el resultado de una de  las expansiones del shell.
  Después de la expansión, cuando se  ejecuta un comando, los campos resultantes
  se utilizan como el nombre del comando y los argumentos.

- ~filename~
  Cadena de caracteres utilizada para identificar un archivo.

- ~job~
  Conjunto  de  procesos que  componen  un  pipeline,  y cualquier  proceso  que
  descienda de él, que están todos en el mismo grupo de procesos.

- ~job control~
  Un  mecanismo mediante  el  cual  los usuarios  pueden  detener (suspender)  y
  reiniciar (reanudar) selectivamente la ejecución de procesos.

- ~metacharacter~
  Un  carácter  que,  cuando  no   está  entre  comillas,  separa  palabras.  Un
  metacarácter  es un  espacio,  un tabulador,  una  nueva línea  o  uno de  los
  siguientes caracteres: '=|=', '=&=', '=;=', '=(=', '=)=', '=<=' o '=>='.

- ~name~
  Una palabra  formada únicamente  por letras,  números y  guiones bajos,  y que
  comienza con una letra  o un guión bajo. Los nombres  se utilizan como nombres
  de variables y funciones del shell. También se denomina identificador.

- ~operator~
  Un operador de control o de  redirección. Ver Redirecciones, para una lista de
  operadores de redirección.  Los operadores contienen al  menos un metacarácter
  no citado.

- ~process group~
  Una colección de procesos  relacionados, cada uno con el mismo  ID de grupo de
  procesos.

- ~process group ID~
  Un identificador único que representa a un grupo de procesos durante su vida.

- ~reserved word~
  Una palabra que tiene un significado especial para el shell. La mayoría de las
  palabras reservadas introducen  construcciones de control de  flujo del shell,
  como for y while.

- ~return status~
  Un sinónimo de estado de salida.

- ~signal~
  Un mecanismo por el  cual un proceso puede ser notificado por  el núcleo de un
  evento que ocurre en el sistema.

- ~special builtin~
  Un comando incorporado  al shell que ha sido clasificado  como especial por el
  estándar POSIX.

- ~token~
  Una secuencia de caracteres considerada como  una sola unidad por el shell. Es
  una palabra o un operador.

- ~word~
  Una secuencia de caracteres tratada como una unidad por el shell. Las palabras
  no pueden incluir metacaracteres no citados.

** Características básicas de la Shell
